var documenterSearchIndex = {"docs":
[{"location":"api/#API-Documentation","page":"API Documentation","title":"API Documentation","text":"","category":"section"},{"location":"api/","page":"API Documentation","title":"API Documentation","text":"Docstrings for PiecewiseQuadratics.jl interface members can be accessed through Julia's built-in documentation system or in the list below.","category":"page"},{"location":"api/","page":"API Documentation","title":"API Documentation","text":"CurrentModule = PiecewiseQuadratics","category":"page"},{"location":"api/#Contents","page":"API Documentation","title":"Contents","text":"","category":"section"},{"location":"api/","page":"API Documentation","title":"API Documentation","text":"Pages = [\"api.md\"]\nDepth = 3","category":"page"},{"location":"api/#Index","page":"API Documentation","title":"Index","text":"","category":"section"},{"location":"api/","page":"API Documentation","title":"API Documentation","text":"Pages = [\"api.md\"]","category":"page"},{"location":"api/#Types","page":"API Documentation","title":"Types","text":"","category":"section"},{"location":"api/","page":"API Documentation","title":"API Documentation","text":"Interval\nBoundedQuadratic\nPiecewiseQuadratic\nFixedMemoryPwq","category":"page"},{"location":"api/#PiecewiseQuadratics.Interval","page":"API Documentation","title":"PiecewiseQuadratics.Interval","text":"Interval(lb::Real, ub::Real)\n\nRepresents a univariate interval.\n\nThe fields represent:\n\nlb: Lower bound of the interval\nub: Upper bound of the interval\n\nExample\n\njulia> interval = Interval(0., 1.)\n[0.00000, 1.00000]\n\njulia> Interval()\nℝ\n\n\n\n\n\n\n","category":"type"},{"location":"api/#PiecewiseQuadratics.BoundedQuadratic","page":"API Documentation","title":"PiecewiseQuadratics.BoundedQuadratic","text":"BoundedQuadratic(lb::Real, ub::Real, p::Real, q::Real, r::Real)\n\nRepresents bounded quadratic function\n\nf(x) = px^2 + qx + r  x  lb ub\n\nThe fields represent:\n\nlb: Lower bound of the function\nub: Upper bound of the function\np: Coefficient of the quadratic term\nq: Coefficient of the linear term\nr: Constant\n\nExample\n\njulia> bq = BoundedQuadratic(0., 5., 3., 2., 1.)\nBoundedQuadratic: f(x) = 3.00000 x² + 2.00000 x + 1.00000, ∀x ∈ [0.00000, 5.00000]\n\n\n\n\n\n\n","category":"type"},{"location":"api/#PiecewiseQuadratics.PiecewiseQuadratic","page":"API Documentation","title":"PiecewiseQuadratics.PiecewiseQuadratic","text":"PiecewiseQuadratic()\nPiecewiseQuadratic(f::BoundedQuadratic)\nPiecewiseQuadratic(f_list::Vector{BoundedQuadratic}[; simplify_result=false])\n\nRepresents piecewise quadratic function, where each piece is a BoundedQuadratic.\n\nThe fields represent:\n\nf_list: a Vector of BoundedQuadratic functions\n\nExample\n\njulia> left = BoundedQuadratic(-Inf, 0., 0., -1., 0.)\nBoundedQuadratic: f(x) = - 1.00000 x , ∀x ∈ [-Inf, 0.00000]\n\njulia> right = BoundedQuadratic(0., Inf, 0., 1., 0.)\nBoundedQuadratic: f(x) = + 1.00000 x , ∀x ∈ [0.00000, Inf]\n\njulia> pwq = PiecewiseQuadratic([left, right])\nPiecewise quadratic function:\nBoundedQuadratic: f(x) = - 1.00000 x , ∀x ∈ [-Inf, 0.00000]\nBoundedQuadratic: f(x) = + 1.00000 x , ∀x ∈ [0.00000, Inf]\n\n\n\n\n\n\n","category":"type"},{"location":"api/#PiecewiseQuadratics.FixedMemoryPwq","page":"API Documentation","title":"PiecewiseQuadratics.FixedMemoryPwq","text":"FixedMemoryPwq(len::Int64)\n\nRepresents piecewise quadratic function with a fixed-length Vector of BoundedQuadratics.\n\nThe fields represent:\n\nf_list: a Vector of BoundedQuadratic functions\nlen: how many of the f_list entries are filled in.\n\n\n\n\n\n","category":"type"},{"location":"api/#Constructors","page":"API Documentation","title":"Constructors","text":"","category":"section"},{"location":"api/","page":"API Documentation","title":"API Documentation","text":"zero\nindicator\nget_line","category":"page"},{"location":"api/#Base.zero","page":"API Documentation","title":"Base.zero","text":"zero(::Type{BoundedQuadratic})\n\nConstruct an empty BoundedQuadratic with no constraints.\n\nExample\n\njulia> zero(BoundedQuadratic)\nBoundedQuadratic: f(x) = 0, ∀x ∈ ℝ\n\n\n\n\n\n\nzero(::Type{PiecewiseQuadratic})\n\nConstruct an empty PiecewiseQuadratic with no constraints.\n\nExample\n\njulia> zero(PiecewiseQuadratic)\nPiecewise quadratic function:\nBoundedQuadratic: f(x) = 0, ∀x ∈ ℝ\n\n\n\n\n\n\n","category":"function"},{"location":"api/#PiecewiseQuadratics.indicator","page":"API Documentation","title":"PiecewiseQuadratics.indicator","text":"indicator(dom::Interval)\nindicator(lb::Real, ub::Real)\n\nConstruct a PiecewiseQuadratic that is 0 on the interval and Inf everywhere else.\n\nExample\n\njulia> indicator(-5, 5)\nPiecewise quadratic function:\nBoundedQuadratic: f(x) = 0, ∀x ∈ [-5.00000, 5.00000]\n\n\n\n\n\n\n","category":"function"},{"location":"api/#PiecewiseQuadratics.get_line","page":"API Documentation","title":"PiecewiseQuadratics.get_line","text":"get_line(x1::Real, y1::Real, x2::Real, y2::Real)\n\nConstruct a new unbounded BoundedQuadratic representing a line passing through (x1, y1) and (x2, y2).\n\nExample\n\njulia> line = get_line(1., 2., 3., 4.)\nBoundedQuadratic: f(x) = + 1.00000 x + 1.00000, ∀x ∈ ℝ\n\n\n\n\n\n\n","category":"function"},{"location":"api/#Functions","page":"API Documentation","title":"Functions","text":"","category":"section"},{"location":"api/#Boolean","page":"API Documentation","title":"Boolean","text":"","category":"section"},{"location":"api/","page":"API Documentation","title":"API Documentation","text":"isempty\nis_point\nis_almost_point\ncontinuous_and_overlapping\nis_convex","category":"page"},{"location":"api/#Base.isempty","page":"API Documentation","title":"Base.isempty","text":"isempty(A::Interval)\n\nReturn true if the interval A is empty (isempty(A::Interval)).\n\n\n\n\n\nisempty(f::BoundedQuadratic)\n\nReturn true if the domain of the BoundedQuadratic f is empty.\n\n\n\n\n\nisempty(f::PiecewiseQuadratic)\n\nReturn true if the PiecewiseQuadratic f is empty (f_list empty).\n\n\n\n\n\n","category":"function"},{"location":"api/#PiecewiseQuadratics.is_point","page":"API Documentation","title":"PiecewiseQuadratics.is_point","text":"is_point(f::BoundedQuadratic)\n\nReturn true if the BoundedQuadratic is defined only on a single point (lb == ub).\n\nSee also: is_almost_point\n\nExample\n\njulia> bq = BoundedQuadratic(0., 5., 3., 2., 1.)\nBoundedQuadratic: f(x) = 3.00000 x² + 2.00000 x + 1.00000, ∀x ∈ [0.00000, 5.00000]\n\njulia> is_point(bq)\nfalse\n\njulia> bq = BoundedQuadratic(5., 5., 3., 2., 1.)\nBoundedQuadratic: f(x) = 3.00000 x² + 2.00000 x + 1.00000, ∀x ∈ [5.00000, 5.00000]\n\njulia> is_point(bq)\ntrue\n\n\n\n\n\n\n","category":"function"},{"location":"api/#PiecewiseQuadratics.is_almost_point","page":"API Documentation","title":"PiecewiseQuadratics.is_almost_point","text":"is_almost_point(f::BoundedQuadratic)\n\nReturn true if the BoundedQuadratic is approximately defined only on a single point (lb ≈ ub).\n\nSee also: is_point\n\nExample\n\njulia> bq = BoundedQuadratic(5., 5. + 1e-14, 3., 2., 1.)\nBoundedQuadratic: f(x) = 3.00000 x² + 2.00000 x + 1.00000, ∀x ∈ [5.00000, 5.00000]\n\njulia> is_point(bq)\nfalse\n\njulia> is_almost_point(bq)\ntrue\n\n\n\n\n\n\n","category":"function"},{"location":"api/#PiecewiseQuadratics.continuous_and_overlapping","page":"API Documentation","title":"PiecewiseQuadratics.continuous_and_overlapping","text":"continuous_and_overlapping(f::BoundedQuadratic, g::BoundedQuadratic)\n\nReturn true if f's right endpoint corresponds with g's left endpoint.\n\n\n\n\n\n","category":"function"},{"location":"api/#PiecewiseQuadratics.is_convex","page":"API Documentation","title":"PiecewiseQuadratics.is_convex","text":"is_convex(f::PiecewiseQuadratic)\n\nReturn true if f is convex.\n\nA PiecewiseQuadratic is convex if for all i:\n\nf_i is convex\nf_i.ub == f_{i+1}.lb\nderivative(f_i)(f_i.ub) <= derivative(f_{i+1})(f_{i+1}.lb)\n\nExample\n\njulia> left = BoundedQuadratic(-Inf, 0., 0., -1., 0.)\nBoundedQuadratic: f(x) = - 1.00000 x , ∀x ∈ [-Inf, 0.00000]\n\njulia> right = BoundedQuadratic(0., Inf, 0., 1., 0.)\nBoundedQuadratic: f(x) = + 1.00000 x , ∀x ∈ [0.00000, Inf]\n\njulia> pwq = PiecewiseQuadratic([left, right])\nPiecewise quadratic function:\nBoundedQuadratic: f(x) = - 1.00000 x , ∀x ∈ [-Inf, 0.00000]\nBoundedQuadratic: f(x) = + 1.00000 x , ∀x ∈ [0.00000, Inf]\n\njulia> is_convex(pwq)\ntrue\n\n\n\n\n\n\n","category":"function"},{"location":"api/#Quadratic-Manipulation","page":"API Documentation","title":"Quadratic Manipulation","text":"","category":"section"},{"location":"api/","page":"API Documentation","title":"API Documentation","text":"reverse\nreverse!\nscale\nscale!\nperspective\nperspective!\nshift\nshift!\ntilt\ntilt!\nrestrict_dom\nrestrict_dom!\nextend_dom\nextend_dom!\nappend!\npush!\nsimplify","category":"page"},{"location":"api/#Base.reverse","page":"API Documentation","title":"Base.reverse","text":"reverse(f::BoundedQuadratic)\n\nReturn f reversed over the y axis. That is, given f(x), return f(-x).\n\nSee also: reverse!\n\nExample\n\njulia> bq = BoundedQuadratic(-1., 2., 1., 1., 1.)\nBoundedQuadratic: f(x) = 1.00000 x² + 1.00000 x + 1.00000, ∀x ∈ [-1.00000, 2.00000]\n\njulia> reverse(bq)\nBoundedQuadratic: f(x) = 1.00000 x² - 1.00000 x + 1.00000, ∀x ∈ [-2.00000, 1.00000]\n\n\n\n\n\n\nreverse(f::PiecewiseQuadratic)\n\nReturn f reversed over the y axis. That is, given f(x), return f(-x).\n\nSee also: reverse\n\n\n\n\n\n","category":"function"},{"location":"api/#PiecewiseQuadratics.reverse!","page":"API Documentation","title":"PiecewiseQuadratics.reverse!","text":"reverse!(f::BoundedQuadratic)\nreverse!(f::BoundedQuadratic, out::BoundedQuadratic)\n\nReverse f inplace.\n\nSee also: reverse\n\n\n\n\n\nreverse!(f::PiecewiseQuadratic)\nreverse!(f::PiecewiseQuadratic, out::PiecewiseQuadratic)\n\nReverse f inplace.\n\nSee also: reverse\n\n\n\n\n\n","category":"function"},{"location":"api/#PiecewiseQuadratics.scale","page":"API Documentation","title":"PiecewiseQuadratics.scale","text":"scale(f::BoundedQuadratic, α::Real)\n\nReturn a new BoundedQuadratic that has been scaled by α. That is, given f(x) and α, returns f(αx).\n\nNote: this operation requires scaling the domain.\n\nSee also: scale!\n\nExample\n\njulia> bq = BoundedQuadratic(-1., 1., 1., 1., 1.)\nBoundedQuadratic: f(x) = 1.00000 x² + 1.00000 x + 1.00000, ∀x ∈ [-1.00000, 1.00000]\n\njulia> scale(bq, 2.)\nBoundedQuadratic: f(x) = 4.00000 x² + 2.00000 x + 1.00000, ∀x ∈ [-0.50000, 0.50000]\n\n\n\n\n\n\nscale(f::PiecewiseQuadratic, α::Real)\n\nReturn a new PiecewiseQuadratic that has been scaled by α. That is, given f(x) and α, returns f(αx).\n\nNote: this operation requires scaling the domain.\n\nSee also: scale!\n\nExample\n\njulia> f = PiecewiseQuadratic([BoundedQuadratic(-1., 0., 0., -1., 0.),\n                               BoundedQuadratic(0., 1., 0., 1., 0.),\n                               BoundedQuadratic(1., 5., 1., 1., 1.)])\nPiecewise quadratic function:\nBoundedQuadratic: f(x) = - 1.00000 x , ∀x ∈ [-1.00000, 0.00000]\nBoundedQuadratic: f(x) = + 1.00000 x , ∀x ∈ [0.00000, 1.00000]\nBoundedQuadratic: f(x) = 1.00000 x² + 1.00000 x + 1.00000, ∀x ∈ [1.00000, 5.00000]\n\njulia> scale(f, 5)\nPiecewise quadratic function:\nBoundedQuadratic: f(x) = - 5.00000 x , ∀x ∈ [-0.20000, 0.00000]\nBoundedQuadratic: f(x) = + 5.00000 x , ∀x ∈ [0.00000, 0.20000]\nBoundedQuadratic: f(x) = 25.00000 x² + 5.00000 x + 1.00000, ∀x ∈ [0.20000, 1.00000]\n\n\n\n\n\n\n","category":"function"},{"location":"api/#PiecewiseQuadratics.scale!","page":"API Documentation","title":"PiecewiseQuadratics.scale!","text":" scale!(f::BoundedQuadratic, α::Real)\n scale!(f::BoundedQuadratic, α::Real, out::BoundedQuadratic)\n\nScale f inplace.\n\nSee also: scale\n\n\n\n\n\nscale!(f::PiecewiseQuadratic, α::Real)\nscale!(f::PiecewiseQuadratic, α::Real, out::PiecewiseQuadratic)\n\nScale f inplace.\n\nSee also: scale\n\n\n\n\n\n","category":"function"},{"location":"api/#PiecewiseQuadratics.perspective","page":"API Documentation","title":"PiecewiseQuadratics.perspective","text":"perspective(f::BoundedQuadratic, α::Real)\n\nReturn the perspective function of f. That is, given f(x) and α, return α * f(x / α).\n\nNote: that this operation requires scaling of the domain.\n\nSee also: perspective!\n\nExample\n\njulia> bq = BoundedQuadratic(-1., 1., 1., 1., 1.)\nBoundedQuadratic: f(x) = 1.00000 x² + 1.00000 x + 1.00000, ∀x ∈ [-1.00000, 1.00000]\n\njulia> perspective(bq, 2.)\nBoundedQuadratic: f(x) = 0.50000 x² + 1.00000 x + 2.00000, ∀x ∈ [-2.00000, 2.00000]\n\n\n\n\n\n\nperspective(f::PiecewiseQuadratic, α::Real)\n\nReturn the perspective function of f. That is, given f(x) and α, return α * f(x / α).\n\nNote: that this operation requires scaling of the domain.\n\nSee also: perspective!\n\nExample\n\njulia> f = PiecewiseQuadratic([BoundedQuadratic(-1., 0., 0., -5., 0.),\n                               BoundedQuadratic(0., 2., 0., 2., 0.)])\nPiecewise quadratic function:\nBoundedQuadratic: f(x) = - 5.00000 x , ∀x ∈ [-1.00000, 0.00000]\nBoundedQuadratic: f(x) = + 2.00000 x , ∀x ∈ [0.00000, 2.00000]\n\njulia> persp = perspective(f, 5.)\nPiecewise quadratic function:\nBoundedQuadratic: f(x) = - 5.00000 x , ∀x ∈ [-5.00000, 0.00000]\nBoundedQuadratic: f(x) = + 2.00000 x , ∀x ∈ [0.00000, 10.00000]\n\n\n\n\n\n\n","category":"function"},{"location":"api/#PiecewiseQuadratics.perspective!","page":"API Documentation","title":"PiecewiseQuadratics.perspective!","text":"perspective!(f::BoundedQuadratic, α::Real)\nperspective!(f::BoundedQuadratic, α::Real, out::BoundedQuadratic)\n\nShift perspective of f inplace.\n\nSee also: perspective\n\n\n\n\n\nperspective!(f::PiecewiseQuadratic, α::Real)\nperspective!(f::PiecewiseQuadratic, α::Real, out::PiecewiseQuadratic)\n\nShift perspective of f inplace.\n\nSee also: perspective\n\n\n\n\n\n","category":"function"},{"location":"api/#PiecewiseQuadratics.shift","page":"API Documentation","title":"PiecewiseQuadratics.shift","text":"shift(f::BoundedQuadratic, δ::Real)\n\nReturn f shifted along the x-axis by δ.\n\nNote: for δ > 0, this is a right shift. For δ < 0, this is a left shift.\n\nSee also: shift!\n\nExample\n\njulia> bq = BoundedQuadratic(-1., 1., 1., 1., 1.)\nBoundedQuadratic: f(x) = 1.00000 x² + 1.00000 x + 1.00000, ∀x ∈ [-1.00000, 1.00000]\n\njulia> shift(bq, 2.)\nBoundedQuadratic: f(x) = 1.00000 x² - 3.00000 x + 3.00000, ∀x ∈ [1.00000, 3.00000]\n\n\n\n\n\n\nshift(f::PiecewiseQuadratic, δ::Real)\n\nReturn f shifted along the x-axis by δ.\n\nNote: for δ > 0, this is a right shift. For δ < 0, this is a left shift.\n\nSee also: shift!\n\nExample\n\njulia> f = PiecewiseQuadratic([BoundedQuadratic(-1., 0., 0., -5., 0.),\n                               BoundedQuadratic(0., 2., 0., 2., 0.)])\nPiecewise quadratic function:\nBoundedQuadratic: f(x) = - 5.00000 x , ∀x ∈ [-1.00000, 0.00000]\nBoundedQuadratic: f(x) = + 2.00000 x , ∀x ∈ [0.00000, 2.00000]\n\njulia> shift(f, 5.)\nPiecewise quadratic function:\nBoundedQuadratic: f(x) = - 5.00000 x + 25.00000, ∀x ∈ [4.00000, 5.00000]\nBoundedQuadratic: f(x) = + 2.00000 x - 10.00000, ∀x ∈ [5.00000, 7.00000]\n\n\n\n\n\n\n","category":"function"},{"location":"api/#PiecewiseQuadratics.shift!","page":"API Documentation","title":"PiecewiseQuadratics.shift!","text":"shift!(f::BoundedQuadratic, δ::Real)\nshift!(f::BoundedQuadratic, δ::Real, out::BoundedQuadratic)\n\nShift f inplace along the x-axis by δ.\n\nSee also: shift\n\n\n\n\n\nshift!(f::PiecewiseQuadratic, δ::Real)\nshift!(f::PiecewiseQuadratic, δ::Real, out::PiecewiseQuadratic)\n\nShift f inplace along the x-axis by δ.\n\nSee also: shift\n\n\n\n\n\n","category":"function"},{"location":"api/#PiecewiseQuadratics.tilt","page":"API Documentation","title":"PiecewiseQuadratics.tilt","text":"tilt(f::BoundedQuadratic, α::Real)\n\nReturn f tilted by α. This shifts linear coefficient q by α.\n\nSee also: tilt!\n\nExample\n\njulia> bq = BoundedQuadratic(-1., 1., 1., 1., 1.)\nBoundedQuadratic: f(x) = 1.00000 x² + 1.00000 x + 1.00000, ∀x ∈ [-1.00000, 1.00000]\n\njulia> tilt(bq, 2.)\nBoundedQuadratic: f(x) = 1.00000 x² + 3.00000 x + 1.00000, ∀x ∈ [-1.00000, 1.00000]\n\n\n\n\n\n\ntilt(f::PiecewiseQuadratic, α::Real)\n\nReturn f tilted by α. This shifts linear coefficient q by α.\n\nSee also: tilt!\n\nExample\n\njulia> f = PiecewiseQuadratic([BoundedQuadratic(-1., 0., 0., -5., 0.),\n                               BoundedQuadratic(0., 2., 0., 2., 0.)])\nPiecewise quadratic function:\nBoundedQuadratic: f(x) = - 5.00000 x , ∀x ∈ [-1.00000, 0.00000]\nBoundedQuadratic: f(x) = + 2.00000 x , ∀x ∈ [0.00000, 2.00000]\n\njulia> tilt(f, 5.)\nPiecewise quadratic function:\nBoundedQuadratic: f(x) = 0, ∀x ∈ [-1.00000, 0.00000]\nBoundedQuadratic: f(x) = + 7.00000 x , ∀x ∈ [0.00000, 2.00000]\n\n\n\n\n\n\n","category":"function"},{"location":"api/#PiecewiseQuadratics.tilt!","page":"API Documentation","title":"PiecewiseQuadratics.tilt!","text":"tilt!(f::BoundedQuadratic, α::Real)\ntilt!(f::BoundedQuadratic, α::Real, out::BoundedQuadratic)\n\nTilt f inplace.\n\nSee also: tilt\n\n\n\n\n\ntilt!(f::PiecewiseQuadratic, α::Real)\ntilt!(f::PiecewiseQuadratic, α::Real, out::PiecewiseQuadratic)\n\nTilt f inplace.\n\n\n\n\n\n","category":"function"},{"location":"api/#PiecewiseQuadratics.restrict_dom","page":"API Documentation","title":"PiecewiseQuadratics.restrict_dom","text":"restrict_dom(f::BoundedQuadratic, dom::Interval)\nrestrict_dom(f::BoundedQuadratic, lb::Real, ub::Real)\n\nReturn a new BoundedQuadratic with domain restricted to the intersect of the passed domain.\n\nSee also: restrict_dom!\n\nExample\n\njulia> bq = BoundedQuadratic(-10., 10., 1., 1., 1.)\nBoundedQuadratic: f(x) = 1.00000 x² + 1.00000 x + 1.00000, ∀x ∈ [-10.00000, 10.00000]\n\njulia> restrict_dom(bq, 2., 3.)\nBoundedQuadratic: f(x) = 1.00000 x² + 1.00000 x + 1.00000, ∀x ∈ [2.00000, 3.00000]\n\n\n\n\n\n\n","category":"function"},{"location":"api/#PiecewiseQuadratics.restrict_dom!","page":"API Documentation","title":"PiecewiseQuadratics.restrict_dom!","text":"restrict_dom!(f::BoundedQuadratic, dom::Interval)\nrestrict_dom!(f::BoundedQuadratic, lb::Real, ub::Real)\nrestrict_dom!(f::BoundedQuadratic, lb::Real, ub::Real, out::BoundedQuadratic)\n\nRestrict domain of f inplace.\n\nSee also: restrict_dom\n\n\n\n\n\n","category":"function"},{"location":"api/#PiecewiseQuadratics.extend_dom","page":"API Documentation","title":"PiecewiseQuadratics.extend_dom","text":"extend_dom(f::BoundedQuadratic)\n\nReturn an unbounded version of f.\n\nSee also: extend_dom!\n\nExample\n\njulia> bq = BoundedQuadratic(-1., 1., 1., 1., 1.)\nBoundedQuadratic: f(x) = 1.00000 x² + 1.00000 x + 1.00000, ∀x ∈ [-1.00000, 1.00000]\n\njulia> extend_dom(bq)\nBoundedQuadratic: f(x) = 1.00000 x² + 1.00000 x + 1.00000, ∀x ∈ ℝ\n\n\n\n\n\n\n","category":"function"},{"location":"api/#PiecewiseQuadratics.extend_dom!","page":"API Documentation","title":"PiecewiseQuadratics.extend_dom!","text":"extend_dom!(f::BoundedQuadratic)\nextend_dom!(f::BoundedQuadratic, out::BoundedQuadratic)\n\nRemove the bounds of f inplace.\n\nSee also: extend_dom\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.append!","page":"API Documentation","title":"Base.append!","text":"append!(f::PiecewiseQuadratic, g::PiecewiseQuadratic; simplify_result=false)\n\nAppend a PiecewiseQuadratic g to the right hand side of PiecewiseQuadratic f.\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.push!","page":"API Documentation","title":"Base.push!","text":" push!(f::PiecewiseQuadratic, g::BoundedQuadratic; simplify_result=false)\n\nAdd a BoundedQuadratic g to the right hand side of PiecewiseQuadratic f.\n\n\n\n\n\n","category":"function"},{"location":"api/#PiecewiseQuadratics.simplify","page":"API Documentation","title":"PiecewiseQuadratics.simplify","text":" simplify(f::PiecewiseQuadratic)\n\nReturn a simplified piecewise quadratic f.\n\nA BoundedQuadratic f_i and and the current rightmost piece should be combined (to become the new rightmost piece) if\n\nEither of f_i or the rightmost piece is a point and they overlap at their lower and upper endpoints respectively\nf_i and the rightmost piece have the same coefficients and they correspond at their lower and upper endpoints respectively (they're just currently separate parts of the same function).\n\nWe also eliminate functions that are points at Inf or -Inf if they come up.\n\nExample\n\njulia> f = PiecewiseQuadratic([BoundedQuadratic(-1., 0., 0., -1., 0.),\n                                      BoundedQuadratic(0., 0., 0., 0., 0.),\n                                      BoundedQuadratic(0., 1., 0., 1., 0.),\n                                      BoundedQuadratic(1., 2., 0., 1., 0.),\n                                      BoundedQuadratic(3., 5., 1., 1., 1.)])\nPiecewise quadratic function:\nBoundedQuadratic: f(x) = - 1.00000 x , ∀x ∈ [-1.00000, 0.00000]\nBoundedQuadratic: f(x) = 0, ∀x ∈ [0.00000, 0.00000]\nBoundedQuadratic: f(x) = + 1.00000 x , ∀x ∈ [0.00000, 1.00000]\nBoundedQuadratic: f(x) = + 1.00000 x , ∀x ∈ [1.00000, 2.00000]\nBoundedQuadratic: f(x) = 1.00000 x² + 1.00000 x + 1.00000, ∀x ∈ [3.00000, 5.00000]\n\njulia> simplify(f)\nPiecewise quadratic function:\nBoundedQuadratic: f(x) = - 1.00000 x , ∀x ∈ [-1.00000, 0.00000]\nBoundedQuadratic: f(x) = + 1.00000 x , ∀x ∈ [0.00000, 2.00000]\nBoundedQuadratic: f(x) = 1.00000 x² + 1.00000 x + 1.00000, ∀x ∈ [3.00000, 5.00000]\n\n\n\n\n\n\n","category":"function"},{"location":"api/#Utility","page":"API Documentation","title":"Utility","text":"","category":"section"},{"location":"api/","page":"API Documentation","title":"API Documentation","text":"domain\nintersect\nderivative\nsum\nsolve_quad\nget_tangent","category":"page"},{"location":"api/#PiecewiseQuadratics.domain","page":"API Documentation","title":"PiecewiseQuadratics.domain","text":"domain(f::BoundedQuadratic)\n\nReturn the Interval on which the BoundedQuadratic is defined.\n\nExample\n\njulia> bq = BoundedQuadratic(0., 5., 3., 2., 1.)\nBoundedQuadratic: f(x) = 3.00000 x² + 2.00000 x + 1.00000, ∀x ∈ [0.00000, 5.00000]\n\njulia> dom = domain(bq)\n[0.00000, 5.00000]\n\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.intersect","page":"API Documentation","title":"Base.intersect","text":"intersect(f_list::Vector{BoundedQuadratic})\n\nIntersect the domains of a list of BoundedQuadratics if possible.\n\nExample\n\njulia> f_list = [BoundedQuadratic(-100, 100, 1, 1, 1),\n          BoundedQuadratic(-50, 25, 1, 1, 1),\n          BoundedQuadratic(0, 50, 1, 1, 1)]\n3-element Vector{BoundedQuadratic}:\n BoundedQuadratic: f(x) = 1.00000 x² + 1.00000 x + 1.00000, ∀x ∈ [-100.00000, 100.00000]\n\n BoundedQuadratic: f(x) = 1.00000 x² + 1.00000 x + 1.00000, ∀x ∈ [-50.00000, 25.00000]\n\n BoundedQuadratic: f(x) = 1.00000 x² + 1.00000 x + 1.00000, ∀x ∈ [0.00000, 50.00000]\n\njulia> out, valid = intersect(f_list);\n\njulia> valid\ntrue\n\njulia> out\n3-element Vector{BoundedQuadratic}:\n BoundedQuadratic: f(x) = 1.00000 x² + 1.00000 x + 1.00000, ∀x ∈ [0.00000, 25.00000]\n\n BoundedQuadratic: f(x) = 1.00000 x² + 1.00000 x + 1.00000, ∀x ∈ [0.00000, 25.00000]\n\n BoundedQuadratic: f(x) = 1.00000 x² + 1.00000 x + 1.00000, ∀x ∈ [0.00000, 25.00000]\n\n\njulia> f_list = [BoundedQuadratic(-100, 0, 1,1,1)\n            BoundedQuadratic(25, 50, 1,1,1)]  # non-overlapping\n2-element Vector{BoundedQuadratic}:\n BoundedQuadratic: f(x) = 1.00000 x² + 1.00000 x + 1.00000, ∀x ∈ [-100.00000, 0.00000]\n\n BoundedQuadratic: f(x) = 1.00000 x² + 1.00000 x + 1.00000, ∀x ∈ [25.00000, 50.00000]\n\njulia> out, valid = intersect(f_list);\n\njulia> valid\nfalse\n\njulia> out\n2-element Vector{BoundedQuadratic}:\n #undef\n #undef\n\n\n\n\n\n\n","category":"function"},{"location":"api/#PiecewiseQuadratics.derivative","page":"API Documentation","title":"PiecewiseQuadratics.derivative","text":"derivative(f::BoundedQuadratic)\n\nReturn the derivative of f, f'\n\nExample\n\njulia> bq = BoundedQuadratic(3., 2., 1.)\nBoundedQuadratic: f(x) = 3.00000 x² + 2.00000 x + 1.00000, ∀x ∈ ℝ\n\njulia> derivative(bq)\nBoundedQuadratic: f(x) = + 6.00000 x + 2.00000, ∀x ∈ ℝ\n\n\n\n\n\n\nderivative(f::BoundedQuadratic, x::Real)\n\nEvaluate the derivative of f at x, f'(x).\n\nExample\n\njulia> bq = BoundedQuadratic(3., 2., 1.)\nBoundedQuadratic: f(x) = 3.00000 x² + 2.00000 x + 1.00000, ∀x ∈ ℝ\n\njulia> derivative(bq, 2.)\n14.0\n\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.sum","page":"API Documentation","title":"Base.sum","text":"sum(f_list::Vector{BoundedQuadratic})\n\nReturn the BoundedQuadratic sum of a list of BoundedQuadratics if it is valid, else nothing.\n\nExample\n\njulia> bq = BoundedQuadratic(-1., 5., 1., 2., 3.)\nBoundedQuadratic: f(x) = 1.00000 x² + 2.00000 x + 3.00000, ∀x ∈ [-1.00000, 5.00000]\n\njulia> sum([bq, bq])\nBoundedQuadratic: f(x) = 2.00000 x² + 4.00000 x + 6.00000, ∀x ∈ [-1.00000, 5.00000]\n\n\n\n\n\n\nsum(f_list::Vector{PiecewiseQuadratic})\n\nReturn the PiecewiseQuadratic sum of a list of PiecewiseQuadratics.\n\nExample\n\njulia> f = PiecewiseQuadratic([BoundedQuadratic(-1., 0., 0., -5., 0.),\n                               BoundedQuadratic(0., 2., 0., 2., 0.)])\nPiecewise quadratic function:\nBoundedQuadratic: f(x) = - 5.00000 x , ∀x ∈ [-1.00000, 0.00000]\nBoundedQuadratic: f(x) = + 2.00000 x , ∀x ∈ [0.00000, 2.00000]\n\njulia> sum([f,f])\nPiecewise quadratic function:\nBoundedQuadratic: f(x) = - 10.00000 x , ∀x ∈ [-1.00000, 0.00000]\nBoundedQuadratic: f(x) = + 4.00000 x , ∀x ∈ [0.00000, 2.00000]\n\njulia> sum([f,-f])\nPiecewise quadratic function:\nBoundedQuadratic: f(x) = 0, ∀x ∈ [-1.00000, 0.00000]\nBoundedQuadratic: f(x) = 0, ∀x ∈ [0.00000, 2.00000]\n\n\n\n\n\n\n","category":"function"},{"location":"api/#PiecewiseQuadratics.solve_quad","page":"API Documentation","title":"PiecewiseQuadratics.solve_quad","text":"solve_quad(a::Real, b::Real, c::Real)\n\nSolve a quadratic function a x^2 + b x + c using the quadratic formula.\n\n\n\n\n\n","category":"function"},{"location":"api/#PiecewiseQuadratics.get_tangent","page":"API Documentation","title":"PiecewiseQuadratics.get_tangent","text":"get_tangent(f::BoundedQuadratic, x::Real)\n\nConstruct a new unbounded BoundedQuadratic representing the (unbounded) tangent line to f at the point x.\n\nExample\n\njulia> bq = BoundedQuadratic(-1., 1., 1., 1., 1.)\nBoundedQuadratic: f(x) = 1.00000 x² + 1.00000 x + 1.00000, ∀x ∈ [-1.00000, 1.00000]\n\njulia> tangent = get_tangent(bq, 0.5)\nBoundedQuadratic: f(x) = + 2.00000 x + 0.75000, ∀x ∈ ℝ\n\n\n\n\n\n\n","category":"function"},{"location":"api/#Optimization","page":"API Documentation","title":"Optimization","text":"","category":"section"},{"location":"api/","page":"API Documentation","title":"API Documentation","text":"minimize\nenvelope\nprox","category":"page"},{"location":"api/#PiecewiseQuadratics.minimize","page":"API Documentation","title":"PiecewiseQuadratics.minimize","text":"minimize(f::BoundedQuadratic)\n\nReturn the minimum x and f(x) of f over its domain.\n\n\n\n\n\nminimize(f::PiecewiseQuadratic)\n\nReturn the minimum x and f(x) of f over its domain.\n\n\n\n\n\n","category":"function"},{"location":"api/#PiecewiseQuadratics.envelope","page":"API Documentation","title":"PiecewiseQuadratics.envelope","text":"envelope(f::PiecewiseQuadratic)\n\nComputes the greatest convex lower bound of a PiecewiseQuadratic f.\n\nExample\n\njulia> f = PiecewiseQuadratic([BoundedQuadratic(-Inf, 0., 0., 1., 0.),\n                               BoundedQuadratic(0., 3., 0., 0., 0.)])\nPiecewise quadratic function:\nBoundedQuadratic: f(x) = + 1.00000 x , ∀x ∈ [-Inf, 0.00000]\nBoundedQuadratic: f(x) = 0, ∀x ∈ [0.00000, 3.00000]\n\njulia> envelope(f)\nPiecewise quadratic function:\nBoundedQuadratic: f(x) = + 1.00000 x - 3.00000, ∀x ∈ [-Inf, 3.00000]\n\n\n\n\n\n\n","category":"function"},{"location":"api/#PiecewiseQuadratics.prox","page":"API Documentation","title":"PiecewiseQuadratics.prox","text":"prox(f::PiecewiseQuadratic, u::Float64[, ρ::Float64=1.0]; use_quadratic::Bool=true)\n\nReturn the proximal operator of f, ρ evaluated at u.\n\nNote: The proximal operator of f, rho is denoted:\n\nprox_f rho(u) = argmin_x  dom(f) f(x) + (rho  2)x - u_2^2\n\nSee Section 6.2 of arXiv:2103.05455 for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Plotting","page":"API Documentation","title":"Plotting","text":"","category":"section"},{"location":"api/","page":"API Documentation","title":"API Documentation","text":"get_plot","category":"page"},{"location":"api/#PiecewiseQuadratics.get_plot","page":"API Documentation","title":"PiecewiseQuadratics.get_plot","text":"get_plot(f::PiecewiseQuadratic; N::Int64=1000)\n\nReturn x, y N-vectors for use with plotting libraries.\n\nExample\n\njulia> using Plots\n\njulia> f = PiecewiseQuadratic([\n         BoundedQuadratic(-Inf, 3.0, 1.0, -3.0, 3.0),\n         BoundedQuadratic(3.0, 4.0, 0.0, -1.0, 3.0),\n         BoundedQuadratic(4.0, 6.0, 2.0, -20.0, 47.0),\n         BoundedQuadratic(6.0, 7.5, 0.0, 1.0, -7.0),\n         BoundedQuadratic(7.5, Inf, 0.0, 4.0, -29.0)\n       ])\nPiecewise quadratic function:\nBoundedQuadratic: f(x) = 1.00000 x² - 3.00000 x + 3.00000, ∀x ∈ [-Inf, 3.00000]\nBoundedQuadratic: f(x) = - 1.00000 x + 3.00000, ∀x ∈ [3.00000, 4.00000]\nBoundedQuadratic: f(x) = 2.00000 x² - 20.00000 x + 47.00000, ∀x ∈ [4.00000, 6.00000]\nBoundedQuadratic: f(x) = + 1.00000 x - 7.00000, ∀x ∈ [6.00000, 7.50000]\nBoundedQuadratic: f(x) = + 4.00000 x - 29.00000, ∀x ∈ [7.50000, Inf]\n\njulia> plot(get_plot(f); grid=false, linestyle=:dash, color=:black, label=\"piece-wise quadratic\")\nPlot{Plots.GRBackend() n=1}\n\njulia> plot!(get_plot(simplify(envelope(f))); color=:blue, la=0.5, label=\"envelope\")\nPlot{Plots.GRBackend() n=2}\n\n\n\n\n\n\n","category":"function"},{"location":"#PiecewiseQuadratics.jl","page":"PiecewiseQuadratics.jl","title":"PiecewiseQuadratics.jl","text":"","category":"section"},{"location":"","page":"PiecewiseQuadratics.jl","title":"PiecewiseQuadratics.jl","text":"PiecewiseQuadratics.jl is a Julia package for manipulation of univariate piecewise quadratic functions of the form","category":"page"},{"location":"","page":"PiecewiseQuadratics.jl","title":"PiecewiseQuadratics.jl","text":"f(x) = p x^2 + q x + r  x  lb ub","category":"page"},{"location":"","page":"PiecewiseQuadratics.jl","title":"PiecewiseQuadratics.jl","text":"where:","category":"page"},{"location":"","page":"PiecewiseQuadratics.jl","title":"PiecewiseQuadratics.jl","text":"p, q, r are scalar\nx is the decision variable\nlb is the lower bound of x\nub is the upper bound of x","category":"page"},{"location":"#Contents","page":"PiecewiseQuadratics.jl","title":"Contents","text":"","category":"section"},{"location":"","page":"PiecewiseQuadratics.jl","title":"PiecewiseQuadratics.jl","text":"Pages = [\"index.md\", \"api.md\"]\nDepth = 2","category":"page"},{"location":"#Installation","page":"PiecewiseQuadratics.jl","title":"Installation","text":"","category":"section"},{"location":"","page":"PiecewiseQuadratics.jl","title":"PiecewiseQuadratics.jl","text":"Use Julia's builtin package manager Pkg to install. From a Julia REPL:","category":"page"},{"location":"","page":"PiecewiseQuadratics.jl","title":"PiecewiseQuadratics.jl","text":"] add PiecewiseQuadratics","category":"page"},{"location":"#Example","page":"PiecewiseQuadratics.jl","title":"Example","text":"","category":"section"},{"location":"","page":"PiecewiseQuadratics.jl","title":"PiecewiseQuadratics.jl","text":"We specify a piecewise quadratic function by providing a list of bounded quadratics in order. Where the pieces overlap, we take the function value to be the minimum over all possible values.","category":"page"},{"location":"","page":"PiecewiseQuadratics.jl","title":"PiecewiseQuadratics.jl","text":"We specify","category":"page"},{"location":"","page":"PiecewiseQuadratics.jl","title":"PiecewiseQuadratics.jl","text":"f(x) = leftbeginarrayll\n  x^2 - 3x - 3  textif  x in -infty 3\n  -x + 3  textif  x in 3 4\n  2x^2 - 20x + 47  textif  x in 4 6\n  x - 7  textif  x in 6 75\n  4x - 29  textif  x in 75 infty\nendarrayright","category":"page"},{"location":"","page":"PiecewiseQuadratics.jl","title":"PiecewiseQuadratics.jl","text":"as follows:","category":"page"},{"location":"","page":"PiecewiseQuadratics.jl","title":"PiecewiseQuadratics.jl","text":"using PiecewiseQuadratics\nf = PiecewiseQuadratic([\n  # BoundedQuadratic(lb, ub, p, q, r),\n  BoundedQuadratic(-Inf, 3.0, 1.0, -3.0, 3.0),\n  BoundedQuadratic(3.0, 4.0, 0.0, -1.0, 3.0),\n  BoundedQuadratic(4.0, 6.0, 2.0, -20.0, 47.0),\n  BoundedQuadratic(6.0, 7.5, 0.0, 1.0, -7.0),\n  BoundedQuadratic(7.5, Inf, 0.0, 4.0, -29.0)\n])","category":"page"},{"location":"","page":"PiecewiseQuadratics.jl","title":"PiecewiseQuadratics.jl","text":"We can visualize the function using get_plot and any common plotting library.","category":"page"},{"location":"","page":"PiecewiseQuadratics.jl","title":"PiecewiseQuadratics.jl","text":"using Plots\nplot(get_plot(f); grid=false, color=:black, label=\"piece-wise quadratic\")\nplot!(get_plot(simplify(envelope(f))); linestyle=:dash, color=:blue, la=0.5, label=\"envelope\", xlims = (-2, 10), ylims = (-4, 18))\nsavefig(\"plot.svg\"); nothing # hide","category":"page"},{"location":"","page":"PiecewiseQuadratics.jl","title":"PiecewiseQuadratics.jl","text":"(Image: )","category":"page"},{"location":"#Authors","page":"PiecewiseQuadratics.jl","title":"Authors","text":"","category":"section"},{"location":"","page":"PiecewiseQuadratics.jl","title":"PiecewiseQuadratics.jl","text":"This package and LCSO.jl were originally developed by Nicholas Moehle, Ellis Brown, and Mykel Kochenderfer at BlackRock AI Labs.  They were developed to produce the results in the following paper: arXiv:2103.05455.","category":"page"},{"location":"#Reference","page":"PiecewiseQuadratics.jl","title":"Reference","text":"","category":"section"},{"location":"","page":"PiecewiseQuadratics.jl","title":"PiecewiseQuadratics.jl","text":"Pages = [\"api.md\"]\nDepth = 3","category":"page"}]
}
